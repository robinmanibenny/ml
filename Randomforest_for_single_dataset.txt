import pandas as pd
import dask.dataframe as dd
from dask_ml.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset with the correct delimiter
# Make sure to replace the path with the exact file path
file_paths = [r"/home/rm18334/Dataset for DEDDIAG/house_00/house_00/item_0010_data.tsv/item_0010_data.tsv",
              r"/home/rm18334/Dataset for DEDDIAG/house_01/house_01/item_0001_data.tsv/item_0001_data.tsv",
              r"/home/rm18334/Dataset for DEDDIAG/house_01/house_01/item_0002_data.tsv/item_0002_data.tsv",
              r"/home/rm18334/Dataset for DEDDIAG/house_01/house_01/item_0004_data.tsv/item_0004_data.tsv",
              ]

dfs = [dd.read_csv(file_path, sep='\t') for file_path in file_paths]
df = dd.concat(dfs, axis=0).repartition(npartitions=100)

# Convert the 'time' column to datetime
df['time'] = dd.to_datetime(df['time'], errors='coerce')

# Extract features from the 'time' column
df['year'] = df['time'].dt.year
df['month'] = df['time'].dt.month
df['day'] = df['time'].dt.day
df['hour'] = df['time'].dt.hour
df['minute'] = df['time'].dt.minute
df['second'] = df['time'].dt.second

# Drop the original 'time' column as it's now encoded
df = df.drop('time', axis=1)

# Handle missing values if any (example: filling with mean for numeric columns)
df.fillna(df.mean())

# Encode categorical variables (if any)
# Example: using one-hot encoding
df = dd.get_dummies(df)

# Print the column names again after encoding
print("Column names after encoding:")
print(df.columns)

# Split the data into features (X) and target variable (y)
X = df.drop(target_column, axis=1)
y = df[target_column]
print("Data split into features and target variable.")

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)
print("Data split into training and testing sets.")

# Train a Random Forest Regressor model
rf_model = RandomForestRegressor(n_estimators=10, random_state=42)
rf_model.fit(X_train, y_train)
print("Training done")

# Make predictions
y_pred = rf_model.predict(X_test)
print("Prediction done")

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Analyze feature importance
feature_importances = pd.DataFrame(rf_model.feature_importances_,
                                   index=X_train.columns,
                                   columns=['importance']).sort_values('importance', ascending=False)

# Display feature importance
print(feature_importances)

# Visualization
plt.figure(figsize=(10,6))
sns.barplot(x=feature_importances.importance, y=feature_importances.index)
plt.title('Feature Importance')
plt.show()

